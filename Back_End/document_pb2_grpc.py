# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import document_pb2 as document__pb2


class DocumentServiceStub(object):
    """Service定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadDocument = channel.unary_unary(
                '/DocumentService/ReadDocument',
                request_serializer=document__pb2.ReadRequest.SerializeToString,
                response_deserializer=document__pb2.ReadResponse.FromString,
                )
        self.WriteDocument = channel.unary_unary(
                '/DocumentService/WriteDocument',
                request_serializer=document__pb2.WriteRequest.SerializeToString,
                response_deserializer=document__pb2.WriteResponse.FromString,
                )
        self.CreateDocument = channel.unary_unary(
                '/DocumentService/CreateDocument',
                request_serializer=document__pb2.CreateRequest.SerializeToString,
                response_deserializer=document__pb2.CreateResponse.FromString,
                )
        self.DeleteDocument = channel.unary_unary(
                '/DocumentService/DeleteDocument',
                request_serializer=document__pb2.DeleteRequest.SerializeToString,
                response_deserializer=document__pb2.DeleteResponse.FromString,
                )
        self.ListDocuments = channel.unary_unary(
                '/DocumentService/ListDocuments',
                request_serializer=document__pb2.Empty.SerializeToString,
                response_deserializer=document__pb2.ListResponse.FromString,
                )


class DocumentServiceServicer(object):
    """Service定义
    """

    def ReadDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDocuments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DocumentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadDocument,
                    request_deserializer=document__pb2.ReadRequest.FromString,
                    response_serializer=document__pb2.ReadResponse.SerializeToString,
            ),
            'WriteDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteDocument,
                    request_deserializer=document__pb2.WriteRequest.FromString,
                    response_serializer=document__pb2.WriteResponse.SerializeToString,
            ),
            'CreateDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDocument,
                    request_deserializer=document__pb2.CreateRequest.FromString,
                    response_serializer=document__pb2.CreateResponse.SerializeToString,
            ),
            'DeleteDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteDocument,
                    request_deserializer=document__pb2.DeleteRequest.FromString,
                    response_serializer=document__pb2.DeleteResponse.SerializeToString,
            ),
            'ListDocuments': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDocuments,
                    request_deserializer=document__pb2.Empty.FromString,
                    response_serializer=document__pb2.ListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DocumentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DocumentService(object):
    """Service定义
    """

    @staticmethod
    def ReadDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/ReadDocument',
            document__pb2.ReadRequest.SerializeToString,
            document__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/WriteDocument',
            document__pb2.WriteRequest.SerializeToString,
            document__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/CreateDocument',
            document__pb2.CreateRequest.SerializeToString,
            document__pb2.CreateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/DeleteDocument',
            document__pb2.DeleteRequest.SerializeToString,
            document__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDocuments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DocumentService/ListDocuments',
            document__pb2.Empty.SerializeToString,
            document__pb2.ListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
